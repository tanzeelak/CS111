Reading 1: Aparci C12 (intro to memory): "Dialogue on Memory Virtualization"
- every address generated by a user is virutal address
  - OS provides illusion to each process, saying that large and private mmeory
Reading 2: Aparci C13 (address spaces)
- 13.1: Early Systems
  - early machines weren't very abstact ot users
  - OS was as et of routines stiting in memory. runing pgm currentinly sititng in physcial memory
- 13.2: Multiprogramming and Time Sharing
  - multiprogamming: multiple proceses were ready to run ata tiven time and tehe OS would switch betwen t hem (ex. io)
    - increased utilizaiton of CPU
  - timesharing. interactivity, may users using machine, waitntinf or response
    - leave process in memory while switiching between them, allowing OS to implement tiem sharing efficiently
    - OS chooses to run one of the processe while the others are in the ready queue
  - protection: allowing mutliple pgms to reside concurrently in memory
- 13.3: The Address Space
  - contians all ofthe memory state of the running pgm: code of the memor has to liec somwhere
  - pgm uses a stack to keep track of wher eit sin ithe function call chain
  - heap uses malloc, grows downward
  - when multiple threads coexist int an addres space, no nice waty to divide address space
  - pgm is loaded an arbirtray physical address
  
