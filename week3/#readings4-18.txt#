Reading 1: Aparci C12 (intro to memory): "Dialogue on Memory Virtualization"
- every address generated by a user is virutal address
  - OS provides illusion to each process, saying that large and private mmeory

Reading 2: Aparci C13 (address spaces)
- 13.1: Early Systems
  - early machines weren't very abstact ot users
  - OS was as et of routines stiting in memory. runing pgm currentinly sititng in physcial memory
- 13.2: Multiprogramming and Time Sharing
  - multiprogamming: multiple proceses were ready to run ata tiven time and tehe OS would switch betwen t hem (ex. io)
    - increased utilizaiton of CPU
  - timesharing. interactivity, may users using machine, waitntinf or response
    - leave process in memory while switiching between them, allowing OS to implement tiem sharing efficiently
    - OS chooses to run one of the processe while the others are in the ready queue
  - protection: allowing mutliple pgms to reside concurrently in memory
- 13.3: The Address Space
  - contians all ofthe memory state of the running pgm: code of the memor has to liec somwhere
  - pgm uses a stack to keep track of wher eit sin ithe function call chain
  - heap uses malloc, grows downward
  - when multiple threads coexist int an addres space, no nice waty to divide address space
  - pgm is loaded an arbirtray physical address
  - virtualizing memroy: pgm think loaded into memeory at partiuclar address 
- 13.4: Goals
  - transperancy: pgm shouldn't be aware of virtualzing
  - efficienyc: 
  - proetion: OS hsould maek sure to protect processes from one another

Reading 3: Aparci C14 (memory APIs)
- 14.1: Types of Memory
  - stack: allocaitona dn deallocations are ipmlicity managed by the copmiler. compiler makes sure to cmaek space on the stack when the funciton is called. 
  - heap: explicity haded by the programmer
- 14.2: The malloc() Call
  - #include <stdlib.h> void *malloc(size_t size);
  - doublple perciosn number? double *d = (double *) malloc(sizeof(double));
  - malloc() returns apoitne rto type void: soC can pass back an adress
- 14.3: The free() CAll
  - int *x = malloc(10 * sizeof(int)); free (x);
  - size of allocated re not passed by user, must be tracekd by emeory allocation library
- 14.4: Common Errors
  - new languageus have ctuomation memory mangement: call something simillar to malloc bu tnever haveto ifuger outw hen to free space
  - Forgetting to Allocate Memory
    - many gpms eepct memoryt ob be alloacated before called
  - Not Allocating Engouh Memory
    - buffer overflow: make almost enough room for hte desitnation buffer
  - Forgetting to Initialize Allocated Memory
    - called malloc() prpoerly, but no valeus into newly-allocated dataa
  - Forgetting to Free Memory
    - memory leak: sometimes calling fress() is unrealonable OS will cleanup garage someomtes
  - Freeing Memory Before You Are Done With It
    - creates a dnging pointer, can overwrite valid memory
  - Freeing Memory REpeatedly
    - double free: undfeined
  - Calling free() Incorrectly
    - expects you to only pass it one of the pointers you received form malloc() 
  - Summary: 
    - purify and valgrind are good fo rlocating memory
- 14.5: Underlying OS Support
  - malloc() and free() are lbirary calls
  - brk(): used to change loation of hte pgms break. Takes i naddress of new break, increasing or dec size o beak. sbrk() is passed an incrmemnt
  - you shouldn't use
  - obtain memory using mmap(), whcih cna create anon memory bthat isonly awssocaited with sawp sapce
- 14.6: Other Calls
  - calloc() aloc emmeory and zeros before returning in case you foret to inalize. realloc() allocates space for a larger poeriton ofmeory, copies the old reagion int it, anrd ret pint to new region

Reading 4: Aparci C17 (allocation algorithms)
- Introduction
  - whe free-space managemnet bcomes diffuclt, segmeentaion is used to implenet virtual memory. exernal fragention, lots ofree space get s dropped invarrying sizes. 
- 17.1: Assumptions
  - malloc() hand s void pointer to ther g of size. fee takes poitner and frees hcunk
  - heap is afree list: contains fref ot all free chunks
  - internal fragmentation: allocator hands out chunks of memory biegger than requested. any used hcunk is internal frag (wasted)
  - each client owns the allocated memory. no compaction of free space
  - allocator manages a contiues region fo bytes, ingle sized file
- 17.2: Lowe-Level Mechanisms
  - Splitting and Coalescing
    - if a request fo ra smaller chunk of memory rhan aiialba made, fi allocator will split the  meomry so that later address remains o the list
    - coalescing of free space: if existing ree chunks, merge into larger free shunk
  - Tracking The Size of Allocated REgions
    - free(): store siz eof region of meory being freed in heder bblock . contains size of allocated reigon
  - Embedding A Free List
    - build a list inside of the free space 
    - call size of 4096mmap to call heap
    - library will first find chunk large nough for request. will split chunk, for requst and remaining
    - caolsec: go thorugh list and merg eneighboring chunks
  - Growing the Heap
    - OS finds physical pages, maps them to address psace of requsing proeccess. then return sval of edn of new heap
- 17.3: Basic Strategies
  - Best Fit
    - essaerch though free lis tnd find chunk of meory
    - return the one tha sis the smallest in candidatse
  - Worst-Fit
    - find larges cunk an return the reueqsted amoungl keep remain gsitll on the free list.
  - First Fit
    - find first block big enoughand ret. using addres-baesed ordeirng amkes coalescing eseir
  - Next Fit: keeps an extra poitn to the lcatoin wher the lsit was looiking last
- 17.4: Other Approaches
  - Segregated Lists:
    - if app has popular-sized reques, ekeep serapte list o mnage object of size
    - by havin ga chunk of memory dedicated to one size, fragmentin lesso f aconcernt
    - slab allocator: ow much memory shuld one dedicate to the pool of meeroyt hat serve specialed request given size
    - object cacehe: kernal allocates number for kernla objects likely to be rqueste
    - when cache runnign out of saapce request slabs from general memory allocator
    - slab allocator keps free object in the pre-inialized state
  - Buddy Allocation:
    - free mmeory is thought ofsapc of 2^N. Searhc of free space recursively deivides free space until findig block big enough.
    - can hav einternal fragmentation, since onlygiving power of two blocks
    - freeing: returns 8KB bloc, checks recursivly if next block is free, coalesicng.. recursively
  - Other Ideas
    - scaling: saerching can be slow

Reading 6: Garbage Collection
- Introduction: 
  - Non-obvious techniques
    - Garbage Collection: seaking no-longer-in-use resoruces
    - De-Fragemntation: reassigning and realocating prev allocated resource to elimn. external fragmenation
- Garbage Collection
  - with many langues, allocated resources are afreeed by close free, malloc, delte,
  - if resouce hs multipel concurrent clients, reousource manage er using an incremen/decremtn for reference count for each object
  - These two options are impractical:
    - OS will not know abotu references copied or destroyed if not invoked with oS
    - most pgming langues do not expictly free somre souces
    - some reesources may never be freed
  - Garbage Collection system:
    - resources are allocated but never explicity freed
    - when reousces small, begin lis to fall resouces that existd orignally. scan for reachable. .each time reachble, remove fro orignal . anyghtin lstill in the lsit of orig resouces can e freed
- De-Fragmentation
  - Continguous Allocation's importnace
    - if allocating blocks of disk, only cost may be longer seeks, and and slower file I/O
    - allocating memory to an app that need to create a 1024 byte data structure, pgm will not work with 256
    - Solid Slate Dissk, new data must e erased at someitng at at ime.
  - Two Applicationso fDe-Fragmentaiton
    - Flash Management: NAND Flash is pseudo-Wrtie)nce-read-Man
      - free blocks are distrib randly thougotu memory
      - to ameks blocks writeable, must first be erased
    - Disk Space Allocation:
      - choose area of disk want ot create contig free space and files
      - for each file in that area, copy to another place, and free space in area want to defrag
      - after copied out of area, coallace free spaceint into contig hunk
      - copy the set files back unitl cointugous
- Conclusions
  - Garabage Collecition
  - Defragmenatin: mitniaget process fodegraditoin due to lsos of external fragmentaion
