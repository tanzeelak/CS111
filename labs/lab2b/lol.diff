16a17
> int listNum = 1;
29c30,31
< 
---
> struct timespec start_lock, end_lock;
> long long mutex_time = 0;
39,42c41,46
<    list = malloc(sizeof(SortedList_t));
<    list->key = NULL;
<    list->next = list;
<    list->prev = list;
---
>    list = malloc(sizeof(SortedList_t)*listNum);
>    for (int i = 0; i < listNum; i++){
>      list[i].key = NULL;
>      list[i].next = &list[i];
>      list[i].prev = &list[i];
>    }
52a57,67
> unsigned int hash(const char* key)
> {
>   unsigned long counter;
>   unsigned long hashAddress = 0;
>   for (counter = 0; key[counter] != '\0'; counter++)
>     {
>       hashAddress = key[counter] + (hashAddress << 6) + (hashAddress << 16) - hashAddress;
>     }
>   return hashAddress;
> }
> 
75,93d89
< void add(long long *pointer, long long value) {
<   long long sum = *pointer + value;
<   if (opt_yield)
<     sched_yield();
<   *pointer = sum;
< }
< 
< void add_c(long long *pointer, long long value) {
<   long long oldValue;
<   long long sum;
<   do {
<     oldValue = *pointer;
<     sum = oldValue + value;
<     if (opt_yield)
<       sched_yield();
<   }while(__sync_val_compare_and_swap(pointer, oldValue, sum) != oldValue);
< 
< }
< 
96d91
< 
99,100c94
<   
<   //    fprintf(stderr, "offset: %d\n", *(int*)offset);
---
> 
102a97
>       unsigned int listId = hash(elem[i].key) % listNum;
104a100,101
> 	  
> 	  clock_gettime(CLOCK_MONOTONIC, &start_lock);
106c103,108
< 	  SortedList_insert(list, &elem[i]);
---
> 	  clock_gettime(CLOCK_MONOTONIC, &end_lock);
> 	  mutex_time += 1000000000L * (end_lock.tv_sec - start_lock.tv_sec) + end_lock.tv_nsec - start_lock.tv_nsec;
> 
> 	  //	  fprintf(stderr, "key: %s, hashid: %u, offset: %d\n", elem[i].key, listId, *(int*)offset);
> 	  SortedList_insert(&list[listId], &elem[i]);
> 
107a110
> 
110a114,116
> 
> 	  clock_gettime(CLOCK_MONOTONIC, &start_lock);
> 
112c118,122
< 	  SortedList_insert(list, &elem[i]);
---
> 
> 	  clock_gettime(CLOCK_MONOTONIC, &end_lock);
> 	  mutex_time += 1000000000L * (end_lock.tv_sec - start_lock.tv_sec) + end_lock.tv_nsec - start_lock.tv_nsec;
> 
> 	  SortedList_insert(&list[listId], &elem[i]);
117c127
< 	  SortedList_insert(list, &elem[i]);
---
> 	  SortedList_insert(&list[listId], &elem[i]);
120c130
<   added = SortedList_length(list);
---
>   //  added = SortedList_length(list);
124a135,136
> 
>       unsigned int listId = hash(elem[i].key) % listNum;
126a139,140
> 	  clock_gettime(CLOCK_MONOTONIC, &start_lock);
> 
128c142,145
< 	  toDel = SortedList_lookup(list, elem[i].key);
---
> 	  clock_gettime(CLOCK_MONOTONIC, &end_lock);
> 	  mutex_time += 1000000000L * (end_lock.tv_sec - start_lock.tv_sec) + end_lock.tv_nsec - start_lock.tv_nsec;
> 
> 	  toDel = SortedList_lookup(&list[listId], elem[i].key);
130a148
> 
133a152,153
> 	  clock_gettime(CLOCK_MONOTONIC, &start_lock);
> 
135c155,158
< 	  toDel = SortedList_lookup(list, elem[i].key);
---
> 	  clock_gettime(CLOCK_MONOTONIC, &end_lock);
> 	  mutex_time += 1000000000L * (end_lock.tv_sec - start_lock.tv_sec) + end_lock.tv_nsec - start_lock.tv_nsec;
> 
> 	  toDel = SortedList_lookup(&list[listId], elem[i].key);
137a161,162
> 
> 
141c166
< 	  toDel = SortedList_lookup(list, elem[i].key);
---
> 	  toDel = SortedList_lookup(&list[listId], elem[i].key);
145c170
<   deleted = SortedList_length(list);
---
>   //  deleted = SortedList_length(list);
168a194
>     int listFlag = 0; 
172a199
>     char* listopt = NULL;
188a216
>       {"lists", required_argument, 0, 'l'},
212a241,244
> 	case 'l':
> 	  listFlag = 1;
> 	  listopt = optarg;
> 	  break;
232c264
< 	fprintf(stderr, "opt_yield: %i", opt_yield);
---
> 	//	fprintf(stderr, "opt_yield: %i", opt_yield);
254a287,290
>     if (listFlag)
>       {
> 	listNum = atoi(listopt);
>       }
298d333
< 	
315,316d349
<     
< 
318,320d350
<     
< 
<     
324c354,355
<     fprintf(stdout, "%s,%i,%i,1,%lli,%lli,%lli\n", tag,threadNum, iterNum, numOp, ns, aveTime);
---
>     long long aveMutex = mutex_time/numOp;
>     fprintf(stdout, "%s,%i,%i,1,%lli,%lli,%lli,%lli\n", tag,threadNum, iterNum, numOp, ns, aveTime, aveMutex);
