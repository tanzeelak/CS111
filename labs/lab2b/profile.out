Total: 6854 samples
    6454  94.2%  94.2%     6854 100.0% listAdd
     195   2.8%  97.0%      239   3.5% SortedList_lookup
     167   2.4%  99.4%      167   2.4% __strcmp_sse42
      29   0.4%  99.9%      161   2.3% SortedList_insert
       9   0.1% 100.0%        9   0.1% _init
       0   0.0% 100.0%     6854 100.0% __clone
       0   0.0% 100.0%     6854 100.0% start_thread
ROUTINE ====================== listAdd in /u/cs/ugrad/tanzeela/cs111/labs/lab2b/lab2_list.c
  6454   6854 Total samples (flat / cumulative)
     .      .   86: 
     .      .   87:   return randomString;
     .      .   88: }
     .      .   89: 
     .      .   90: void* listAdd(void* offset)
---
     .      .   91: {
     .      .   92:   int i, added, deleted;
     .      .   93:   SortedListElement_t *toDel;
     .      .   94: 
     .      .   95:   for (i = *(int*)offset; i < *(int*)offset+iterNum; i++)
     .      .   96:     {
     .      .   97:       unsigned int listId = hash(elem[i].key) % listNum;
     .      .   98:       if (syncopt == 'm')
     .      .   99: 	{
     .      .  100: 	  clock_gettime(CLOCK_MONOTONIC, &start_lock);
     .      .  101: 	  pthread_mutex_lock(&count_mutex);
     .      .  102: 	  clock_gettime(CLOCK_MONOTONIC, &end_lock);
     .      .  103: 	  mutex_time += 1000000000L * (end_lock.tv_sec - start_lock.tv_sec) + end_lock.tv_nsec - start_lock.tv_nsec;
     .      .  104: 
     .      .  105: 	  SortedList_insert(&list[listId], &elem[i]);
     .      .  106: 	  pthread_mutex_unlock(&count_mutex);
     .      .  107: 
     .      .  108: 	}
     .      .  109:       else if (syncopt == 's')
     .      .  110: 	{
     .      .  111: 
     .      .  112: 	  clock_gettime(CLOCK_MONOTONIC, &start_lock);
     .      .  113: 
  1588   1588  114:   	  while(__sync_lock_test_and_set(&testAndSet, 1));
     .      .  115: 
     .      .  116: 	  clock_gettime(CLOCK_MONOTONIC, &end_lock);
     1      1  117: 	  mutex_time += 1000000000L * (end_lock.tv_sec - start_lock.tv_sec) + end_lock.tv_nsec - start_lock.tv_nsec;
     .      .  118: 
     .    161  119: 	  SortedList_insert(&list[listId], &elem[i]);
     .      .  120: 	  __sync_lock_release(&testAndSet);
     .      .  121: 	}
     .      .  122:       else
     .      .  123: 	{
     .      .  124: 	  SortedList_insert(&list[listId], &elem[i]);
     .      .  125: 	}
     .      .  126:     }
     .      .  127:   if(SortedList_length(list) == -1)
     .      .  128:     {
     .      .  129:       fprintf(stderr, "List is corrupted\n");
     .      .  130:       exit(2);
     .      .  131:     }
     .      .  132: 
     .      .  133:   for (i = *(int*)offset; i < *(int*)offset+iterNum; i++)
     .      .  134:     {
     .      .  135: 
     .      .  136:       unsigned int listId = hash(elem[i].key) % listNum;
     .      .  137:       if (syncopt == 'm')
     .      .  138: 	{
     .      .  139: 	  clock_gettime(CLOCK_MONOTONIC, &start_lock);
     .      .  140: 
     .      .  141: 	  pthread_mutex_lock(&count_mutex);
     .      .  142: 	  clock_gettime(CLOCK_MONOTONIC, &end_lock);
     .      .  143: 	  mutex_time += 1000000000L * (end_lock.tv_sec - start_lock.tv_sec) + end_lock.tv_nsec - start_lock.tv_nsec;
     .      .  144: 
     .      .  145: 	  if(SortedList_lookup(&list[listId], elem[i].key) == NULL)
     .      .  146: 	    {
     .      .  147: 	      fprintf(stderr,"Element not found in lookup.\n");
     .      .  148: 	      exit(2);
     .      .  149: 	    }
     .      .  150: 
     .      .  151: 	  SortedList_delete(&elem[i]);
     .      .  152: 	  pthread_mutex_unlock(&count_mutex);
     .      .  153: 
     .      .  154: 	}
     .      .  155:       else if (syncopt == 's')
     .      .  156: 	{
     .      .  157: 	  clock_gettime(CLOCK_MONOTONIC, &start_lock);
     .      .  158: 
  4865   4865  159:   	  while(__sync_lock_test_and_set(&testAndSet, 1));
     .      .  160: 	  clock_gettime(CLOCK_MONOTONIC, &end_lock);
     .      .  161: 	  mutex_time += 1000000000L * (end_lock.tv_sec - start_lock.tv_sec) + end_lock.tv_nsec - start_lock.tv_nsec;
     .      .  162: 
     .    239  163: 	  if(SortedList_lookup(&list[listId], elem[i].key) == NULL)
     .      .  164: 	    {
     .      .  165: 	      fprintf(stderr,"Element not found in lookup.\n");
     .      .  166: 	      exit(2);
     .      .  167: 	    }
     .      .  168: 	  SortedList_delete(&elem[i]);
     .      .  169: 	  __sync_lock_release(&testAndSet);
     .      .  170: 
     .      .  171: 
     .      .  172: 	}
     .      .  173:       else
     .      .  174: 	{
     .      .  175: 	  if(SortedList_lookup(&list[listId], elem[i].key) == NULL)
     .      .  176: 	    {
     .      .  177: 	      fprintf(stderr,"Element not found in lookup.\n");
     .      .  178: 	      exit(2);
     .      .  179: 	    }
     .      .  180: 	  SortedList_delete(&elem[i]);
     .      .  181: 	}
     .      .  182:     }
     .      .  183:   if (SortedList_length(list) == -1)
     .      .  184:     {
     .      .  185:       fprintf(stderr,"List is corrupted.\n");
     .      .  186:       exit(2);
     .      .  187:     }
     .      .  188: }
---
     .      .  189: 
     .      .  190: 
     .      .  191: void signal_callback_handler(int signum)
     .      .  192: {
     .      .  193:   fprintf(stderr,"Caught SIGSEGV %d\n", signum);
ROUTINE ====================== listAdd in /u/cs/ugrad/tanzeela/cs111/labs/lab2b/lab2_list.c
  6454   6854 Total samples (flat / cumulative)
     .      .   86: 
     .      .   87:   return randomString;
     .      .   88: }
     .      .   89: 
     .      .   90: void* listAdd(void* offset)
---
     .      .   91: {
     .      .   92:   int i, added, deleted;
     .      .   93:   SortedListElement_t *toDel;
     .      .   94: 
     .      .   95:   for (i = *(int*)offset; i < *(int*)offset+iterNum; i++)
     .      .   96:     {
     .      .   97:       unsigned int listId = hash(elem[i].key) % listNum;
     .      .   98:       if (syncopt == 'm')
     .      .   99: 	{
     .      .  100: 	  clock_gettime(CLOCK_MONOTONIC, &start_lock);
     .      .  101: 	  pthread_mutex_lock(&count_mutex);
     .      .  102: 	  clock_gettime(CLOCK_MONOTONIC, &end_lock);
     .      .  103: 	  mutex_time += 1000000000L * (end_lock.tv_sec - start_lock.tv_sec) + end_lock.tv_nsec - start_lock.tv_nsec;
     .      .  104: 
     .      .  105: 	  SortedList_insert(&list[listId], &elem[i]);
     .      .  106: 	  pthread_mutex_unlock(&count_mutex);
     .      .  107: 
     .      .  108: 	}
     .      .  109:       else if (syncopt == 's')
     .      .  110: 	{
     .      .  111: 
     .      .  112: 	  clock_gettime(CLOCK_MONOTONIC, &start_lock);
     .      .  113: 
  1588   1588  114:   	  while(__sync_lock_test_and_set(&testAndSet, 1));
     .      .  115: 
     .      .  116: 	  clock_gettime(CLOCK_MONOTONIC, &end_lock);
     1      1  117: 	  mutex_time += 1000000000L * (end_lock.tv_sec - start_lock.tv_sec) + end_lock.tv_nsec - start_lock.tv_nsec;
     .      .  118: 
     .    161  119: 	  SortedList_insert(&list[listId], &elem[i]);
     .      .  120: 	  __sync_lock_release(&testAndSet);
     .      .  121: 	}
     .      .  122:       else
     .      .  123: 	{
     .      .  124: 	  SortedList_insert(&list[listId], &elem[i]);
     .      .  125: 	}
     .      .  126:     }
     .      .  127:   if(SortedList_length(list) == -1)
     .      .  128:     {
     .      .  129:       fprintf(stderr, "List is corrupted\n");
     .      .  130:       exit(2);
     .      .  131:     }
     .      .  132: 
     .      .  133:   for (i = *(int*)offset; i < *(int*)offset+iterNum; i++)
     .      .  134:     {
     .      .  135: 
     .      .  136:       unsigned int listId = hash(elem[i].key) % listNum;
     .      .  137:       if (syncopt == 'm')
     .      .  138: 	{
     .      .  139: 	  clock_gettime(CLOCK_MONOTONIC, &start_lock);
     .      .  140: 
     .      .  141: 	  pthread_mutex_lock(&count_mutex);
     .      .  142: 	  clock_gettime(CLOCK_MONOTONIC, &end_lock);
     .      .  143: 	  mutex_time += 1000000000L * (end_lock.tv_sec - start_lock.tv_sec) + end_lock.tv_nsec - start_lock.tv_nsec;
     .      .  144: 
     .      .  145: 	  if(SortedList_lookup(&list[listId], elem[i].key) == NULL)
     .      .  146: 	    {
     .      .  147: 	      fprintf(stderr,"Element not found in lookup.\n");
     .      .  148: 	      exit(2);
     .      .  149: 	    }
     .      .  150: 
     .      .  151: 	  SortedList_delete(&elem[i]);
     .      .  152: 	  pthread_mutex_unlock(&count_mutex);
     .      .  153: 
     .      .  154: 	}
     .      .  155:       else if (syncopt == 's')
     .      .  156: 	{
     .      .  157: 	  clock_gettime(CLOCK_MONOTONIC, &start_lock);
     .      .  158: 
  4865   4865  159:   	  while(__sync_lock_test_and_set(&testAndSet, 1));
     .      .  160: 	  clock_gettime(CLOCK_MONOTONIC, &end_lock);
     .      .  161: 	  mutex_time += 1000000000L * (end_lock.tv_sec - start_lock.tv_sec) + end_lock.tv_nsec - start_lock.tv_nsec;
     .      .  162: 
     .    239  163: 	  if(SortedList_lookup(&list[listId], elem[i].key) == NULL)
     .      .  164: 	    {
     .      .  165: 	      fprintf(stderr,"Element not found in lookup.\n");
     .      .  166: 	      exit(2);
     .      .  167: 	    }
     .      .  168: 	  SortedList_delete(&elem[i]);
     .      .  169: 	  __sync_lock_release(&testAndSet);
     .      .  170: 
     .      .  171: 
     .      .  172: 	}
     .      .  173:       else
     .      .  174: 	{
     .      .  175: 	  if(SortedList_lookup(&list[listId], elem[i].key) == NULL)
     .      .  176: 	    {
     .      .  177: 	      fprintf(stderr,"Element not found in lookup.\n");
     .      .  178: 	      exit(2);
     .      .  179: 	    }
     .      .  180: 	  SortedList_delete(&elem[i]);
     .      .  181: 	}
     .      .  182:     }
     .      .  183:   if (SortedList_length(list) == -1)
     .      .  184:     {
     .      .  185:       fprintf(stderr,"List is corrupted.\n");
     .      .  186:       exit(2);
     .      .  187:     }
     .      .  188: }
---
     .      .  189: 
     .      .  190: 
     .      .  191: void signal_callback_handler(int signum)
     .      .  192: {
     .      .  193:   fprintf(stderr,"Caught SIGSEGV %d\n", signum);
